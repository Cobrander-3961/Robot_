#if defined(LV_LVGL_H_INCLUDE_SIMPLE)
#include "lvgl.h"
#else
#include "lvgl.h"
#endif


#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif

#ifndef LV_ATTRIBUTE_IMG__CIECLE_ALPHA_8X8
#define LV_ATTRIBUTE_IMG__CIECLE_ALPHA_8X8
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG__CIECLE_ALPHA_8X8 uint8_t _ciecle_alpha_8x8_map[] LOCATION_ATTRIBUTE("ExtFlashSection")= {
#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
  /*Pixel format: Alpha 8 bit, Red: 3 bit, Green: 3 bit, Blue: 2 bit*/
  0x00, 0x00, 0xe4, 0x4b, 0xe4, 0x85, 0xe4, 0xaf, 0xe4, 0xaf, 0xe4, 0x85, 0xe4, 0x4b, 0x00, 0x00, 
  0xe4, 0x4b, 0xe4, 0x32, 0xe4, 0x8d, 0xe4, 0xef, 0xe4, 0xef, 0xe4, 0x8d, 0xe4, 0x42, 0xe4, 0x4a, 
  0xe4, 0x85, 0xe4, 0x8d, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0x8d, 0xe4, 0x85, 
  0xe4, 0xaf, 0xe4, 0xef, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xef, 0xe4, 0xaf, 
  0xe4, 0xaf, 0xe4, 0xef, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xef, 0xe4, 0xaf, 
  0xe4, 0x85, 0xe4, 0x8d, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe4, 0x8d, 0xe4, 0x85, 
  0xe4, 0x4b, 0xe4, 0x29, 0xe4, 0x8d, 0xe4, 0xef, 0xe4, 0xef, 0xe4, 0x8d, 0xe4, 0x1e, 0xe4, 0x4b, 
  0x00, 0x00, 0xe4, 0x4a, 0xe4, 0x85, 0xe4, 0xaf, 0xe4, 0xaf, 0xe4, 0x85, 0xe4, 0x4b, 0x00, 0x00, 
#endif
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0
  /*Pixel format: Alpha 8 bit, Red: 5 bit, Green: 6 bit, Blue: 5 bit*/
  0x00, 0x00, 0x00, 0x01, 0xd9, 0x4b, 0x01, 0xd9, 0x85, 0x01, 0xd9, 0xaf, 0x01, 0xd9, 0xaf, 0x01, 0xd9, 0x85, 0x01, 0xd9, 0x4b, 0x00, 0x00, 0x00, 
  0x01, 0xd9, 0x4b, 0xc1, 0xd8, 0x32, 0x01, 0xd9, 0x8d, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0x8d, 0x01, 0xd9, 0x42, 0xe0, 0xd8, 0x4a, 
  0x01, 0xd9, 0x85, 0x01, 0xd9, 0x8d, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0x8d, 0x01, 0xd9, 0x85, 
  0x01, 0xd9, 0xaf, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0xaf, 
  0x01, 0xd9, 0xaf, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0xaf, 
  0x01, 0xd9, 0x85, 0x01, 0xd9, 0x8d, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0xff, 0x01, 0xd9, 0x8d, 0x01, 0xd9, 0x85, 
  0x01, 0xd9, 0x4b, 0xc1, 0xd8, 0x29, 0x01, 0xd9, 0x8d, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0xef, 0x01, 0xd9, 0x8d, 0xe1, 0xd8, 0x1e, 0x01, 0xd9, 0x4b, 
  0x00, 0x00, 0x00, 0xe0, 0xd8, 0x4a, 0x01, 0xd9, 0x85, 0x01, 0xd9, 0xaf, 0x01, 0xd9, 0xaf, 0x01, 0xd9, 0x85, 0x01, 0xd9, 0x4b, 0x00, 0x00, 0x00, 
#endif
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP != 0
  /*Pixel format: Alpha 8 bit, Red: 5 bit, Green: 6 bit, Blue: 5 bit  BUT the 2  color bytes are swapped*/
  0x00, 0x00, 0x00, 0xd9, 0x01, 0x4b, 0xd9, 0x01, 0x85, 0xd9, 0x01, 0xaf, 0xd9, 0x01, 0xaf, 0xd9, 0x01, 0x85, 0xd9, 0x01, 0x4b, 0x00, 0x00, 0x00, 
  0xd9, 0x01, 0x4b, 0xd8, 0xc1, 0x32, 0xd9, 0x01, 0x8d, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0x8d, 0xd9, 0x01, 0x42, 0xd8, 0xe0, 0x4a, 
  0xd9, 0x01, 0x85, 0xd9, 0x01, 0x8d, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0x8d, 0xd9, 0x01, 0x85, 
  0xd9, 0x01, 0xaf, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0xaf, 
  0xd9, 0x01, 0xaf, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0xaf, 
  0xd9, 0x01, 0x85, 0xd9, 0x01, 0x8d, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0xff, 0xd9, 0x01, 0x8d, 0xd9, 0x01, 0x85, 
  0xd9, 0x01, 0x4b, 0xd8, 0xc1, 0x29, 0xd9, 0x01, 0x8d, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0xef, 0xd9, 0x01, 0x8d, 0xd8, 0xe1, 0x1e, 0xd9, 0x01, 0x4b, 
  0x00, 0x00, 0x00, 0xd8, 0xe0, 0x4a, 0xd9, 0x01, 0x85, 0xd9, 0x01, 0xaf, 0xd9, 0x01, 0xaf, 0xd9, 0x01, 0x85, 0xd9, 0x01, 0x4b, 0x00, 0x00, 0x00, 
#endif
#if LV_COLOR_DEPTH == 32
  /*Pixel format: Alpha 8 bit, Red: 8 bit, Green: 8 bit, Blue: 8 bit*/
  0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0xd6, 0x4b, 0x06, 0x1f, 0xd9, 0x85, 0x06, 0x1f, 0xd8, 0xaf, 0x06, 0x1f, 0xd8, 0xaf, 0x06, 0x1f, 0xd9, 0x85, 0x07, 0x1f, 0xd6, 0x4b, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0x1f, 0xd6, 0x4b, 0x05, 0x19, 0xd6, 0x32, 0x05, 0x1f, 0xd9, 0x8d, 0x06, 0x1e, 0xd8, 0xef, 0x06, 0x1e, 0xd8, 0xef, 0x05, 0x1f, 0xd9, 0x8d, 0x04, 0x1f, 0xd8, 0x42, 0x03, 0x1c, 0xd9, 0x4a, 
  0x06, 0x1f, 0xd9, 0x85, 0x05, 0x1f, 0xd9, 0x8d, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x05, 0x1f, 0xd9, 0x8d, 0x06, 0x1f, 0xd9, 0x85, 
  0x06, 0x1f, 0xd8, 0xaf, 0x06, 0x1e, 0xd8, 0xef, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xef, 0x06, 0x1f, 0xd8, 0xaf, 
  0x06, 0x1f, 0xd8, 0xaf, 0x06, 0x1e, 0xd8, 0xef, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xef, 0x06, 0x1f, 0xd8, 0xaf, 
  0x06, 0x1f, 0xd9, 0x85, 0x05, 0x1f, 0xd9, 0x8d, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x06, 0x1e, 0xd8, 0xff, 0x05, 0x1f, 0xd9, 0x8d, 0x06, 0x1f, 0xd9, 0x85, 
  0x07, 0x1f, 0xd6, 0x4b, 0x06, 0x19, 0xda, 0x29, 0x05, 0x1f, 0xd9, 0x8d, 0x06, 0x1e, 0xd8, 0xef, 0x06, 0x1e, 0xd8, 0xef, 0x05, 0x1f, 0xd9, 0x8d, 0x08, 0x1a, 0xd4, 0x1e, 0x07, 0x1f, 0xd6, 0x4b, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0xd9, 0x4a, 0x06, 0x1f, 0xd9, 0x85, 0x06, 0x1f, 0xd8, 0xaf, 0x06, 0x1f, 0xd8, 0xaf, 0x06, 0x1f, 0xd9, 0x85, 0x07, 0x1f, 0xd6, 0x4b, 0x00, 0x00, 0x00, 0x00, 
#endif
};

const lv_img_dsc_t _ciecle_alpha_8x8 = {
  .header.cf = LV_IMG_CF_TRUE_COLOR_ALPHA,
  .header.always_zero = 0,
  .header.reserved = 0,
  .header.w = 8,
  .header.h = 8,
  .data_size = 64 * LV_IMG_PX_SIZE_ALPHA_BYTE,
  .data = _ciecle_alpha_8x8_map,
};
